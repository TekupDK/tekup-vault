name: TekupVault Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Lint
        run: pnpm lint
      
      - name: Type check
        run: pnpm type-check

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    
    services:
      postgres:
        image: ankane/pgvector:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tekupvault_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build
        run: pnpm build
      
      - name: Run unit tests
        run: pnpm test -- --coverage
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tekupvault_test
          SUPABASE_URL: https://test.supabase.co
          SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_KEY: ${{ secrets.TEST_SUPABASE_SERVICE_KEY }}
          GITHUB_TOKEN: ${{ secrets.TEST_GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.TEST_OPENAI_API_KEY }}
          API_KEY: test_api_key_for_ci
          GITHUB_WEBHOOK_SECRET: test_webhook_secret
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: ankane/pgvector:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tekupvault_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build
        run: pnpm build
      
      - name: Run database migrations
        run: |
          psql -h localhost -U postgres -d tekupvault_test -f supabase/migrations/20250114000000_initial_schema.sql
          psql -h localhost -U postgres -d tekupvault_test -f supabase/migrations/20250116000000_add_rls_policies.sql
        env:
          PGPASSWORD: postgres
      
      - name: Start API server
        run: |
          cd apps/vault-api
          node dist/index.js &
          echo $! > api.pid
          sleep 5
        env:
          PORT: 3001
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tekupvault_test
          SUPABASE_URL: https://test.supabase.co
          SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_KEY: ${{ secrets.TEST_SUPABASE_SERVICE_KEY }}
          GITHUB_TOKEN: ${{ secrets.TEST_GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.TEST_OPENAI_API_KEY }}
          API_KEY: test_api_key_for_ci
          GITHUB_WEBHOOK_SECRET: test_webhook_secret
      
      - name: Wait for API to be ready
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:3001/health; do sleep 1; done'
      
      - name: Run Quick Test
        run: |
          cd test-scenarios
          node quick-test.mjs
        env:
          API_URL: http://localhost:3001
          API_KEY: test_api_key_for_ci
      
      - name: Run Search Quality Tests
        run: |
          cd test-scenarios
          node 01-search-quality-test.mjs
        env:
          API_URL: http://localhost:3001
          API_KEY: test_api_key_for_ci
        continue-on-error: true
      
      - name: Run Edge Cases Tests
        run: |
          cd test-scenarios
          node 02-edge-cases-test.mjs
        env:
          API_URL: http://localhost:3001
          API_KEY: test_api_key_for_ci
      
      - name: Run Data Integrity Tests
        run: |
          cd test-scenarios
          node 04-data-integrity-test.mjs
        env:
          API_URL: http://localhost:3001
          API_KEY: test_api_key_for_ci
        continue-on-error: true
      
      - name: Stop API server
        if: always()
        run: |
          if [ -f apps/vault-api/api.pid ]; then
            kill $(cat apps/vault-api/api.pid) || true
          fi

  performance-tests:
    name: Performance Tests (Smoke)
    runs-on: ubuntu-latest
    needs: integration-tests
    
    services:
      postgres:
        image: ankane/pgvector:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tekupvault_test
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build
        run: pnpm build
      
      - name: Start API server
        run: |
          cd apps/vault-api
          node dist/index.js &
          sleep 5
        env:
          PORT: 3001
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tekupvault_test
          SUPABASE_URL: https://test.supabase.co
          SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_KEY: ${{ secrets.TEST_SUPABASE_SERVICE_KEY }}
          GITHUB_TOKEN: ${{ secrets.TEST_GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.TEST_OPENAI_API_KEY }}
          API_KEY: test_api_key_for_ci
      
      - name: Run Performance Tests (5 min timeout)
        run: |
          cd test-scenarios
          timeout 300 node 03-performance-test.mjs || true
        env:
          API_URL: http://localhost:3001
          API_KEY: test_api_key_for_ci

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run security audit
        run: pnpm audit --audit-level=high
        continue-on-error: true
      
      - name: Check for vulnerabilities
        run: |
          echo "Security audit completed. Check logs for details."

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, security-audit]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Audit: ${{ needs.security-audit.result }}" >> $GITHUB_STEP_SUMMARY
      
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const unitTests = '${{ needs.unit-tests.result }}';
            const integrationTests = '${{ needs.integration-tests.result }}';
            const performanceTests = '${{ needs.performance-tests.result }}';
            const securityAudit = '${{ needs.security-audit.result }}';
            
            let status = '✅ All tests passed!';
            let emoji = '🎉';
            
            if (unitTests !== 'success' || integrationTests !== 'success') {
              status = '❌ Some tests failed. Please review the logs.';
              emoji = '⚠️';
            } else if (performanceTests !== 'success') {
              status = '⚠️ Tests passed but performance tests had issues.';
              emoji = '⚠️';
            }
            
            const body = `## ${emoji} Test Results
            
            | Test Suite | Status |
            |------------|--------|
            | Unit Tests | ${unitTests === 'success' ? '✅' : '❌'} ${unitTests} |
            | Integration Tests | ${integrationTests === 'success' ? '✅' : '❌'} ${integrationTests} |
            | Performance Tests | ${performanceTests === 'success' ? '✅' : '⚠️'} ${performanceTests} |
            | Security Audit | ${securityAudit === 'success' ? '✅' : '⚠️'} ${securityAudit} |
            
            ${status}
            
            [View detailed test results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            📚 [Test Documentation](https://github.com/${{ github.repository }}/blob/main/docs/TEST_CASES.md)
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

